name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Build and push app image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/app:latest
          ghcr.io/${{ github.repository_owner }}/app:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app:buildcache,mode=max

    - name: Build and push gradio image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.gradio
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/gradio:latest
          ghcr.io/${{ github.repository_owner }}/gradio:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/gradio:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/gradio:buildcache,mode=max

    - name: Set up environment variables
      run: |
        echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}" >> $GITHUB_ENV
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV

    - name: Run build and test
      id: build-and-test
      timeout-minutes: 30
      run: |
        start_time=$(date +%s)
        
        docker-compose up -d
        
        # Wait for containers to start
        sleep 30
        
        # Run your test commands here
        docker-compose exec -T app python -c "print('App container is running')"
        docker-compose exec -T gradio python -c "print('Gradio container is running')"
        
        # Add more test commands as needed
        
        # Stop and remove the containers
        docker-compose down
        
        end_time=$(date +%s)
        echo "duration=$((end_time - start_time))" >> $GITHUB_OUTPUT

    - name: Print execution time
      if: always()
      run: |
        duration=${{ steps.build-and-test.outputs.duration }}
        minutes=$((duration / 60))
        seconds=$((duration % 60))
        echo "Build and test execution time: ${minutes} minutes and ${seconds} seconds"

  test-deployment:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Pull and run Docker images
      run: |
        echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}" > .env
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env
        docker-compose pull
        docker-compose up -d

    - name: Wait for containers to start
      run: sleep 30

    - name: Check if ports are open
      run: |
        nc -zv localhost 8001
        nc -zv localhost 7860
        nc -zv localhost 11434

    - name: Check application health
      run: |
        curl -f http://localhost:8001/health || exit 1
        curl -f http://localhost:7860/health || exit 1

    - name: Print container logs
      if: always()
      run: docker-compose logs

    - name: Stop and remove containers
      if: always()
      run: docker-compose down