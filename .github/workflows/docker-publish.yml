name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - refactor_app_server
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Aggressive disk space cleanup
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        docker system prune -af
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
        sudo rm -rf /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup
        sudo rm -rf /home/linuxbrew
        sudo rm -rf /usr/local/lib/node_modules
        sudo rm -rf /var/lib/docker/overlay2
        df -h

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Build and push app image
      uses: docker/build-push-action@v5
      with:
        context: ./project
        file: ./project/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/app:latest
          ghcr.io/${{ github.repository_owner }}/app:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Build and push gradio image
      uses: docker/build-push-action@v5
      with:
        context: ./project
        file: ./project/Dockerfile.gradio
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/gradio:latest
          ghcr.io/${{ github.repository_owner }}/gradio:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/gradio:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/gradio:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Clean up after build
      if: always()
      run: |
        docker system prune -af
        df -h

    - name: Set up environment variables
      run: |
        echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}" >> $GITHUB_ENV
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV

    - name: Install Docker Compose and Run build and test
      id: build-and-test
      timeout-minutes: 30
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

        echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}" > ./project/.env
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> ./project/.env

        cd ./project
        docker-compose up -d
        sleep 30
        docker-compose exec -T app python -c "print('App container is running')"
        docker-compose exec -T gradio python -c "print('Gradio container is running')"
        docker-compose down

    - name: Clean up after test
      if: always()
      run: |
        docker system prune -af
        df -h

  test-deployment:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Aggressive disk space cleanup
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        docker system prune -af
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
        sudo rm -rf /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup
        sudo rm -rf /home/linuxbrew
        sudo rm -rf /usr/local/lib/node_modules
        sudo rm -rf /var/lib/docker/overlay2
        df -h

    - name: Install Docker Compose and Run deployment test
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

        echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}" > ./project/.env
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> ./project/.env

        cd ./project
        docker-compose pull
        docker-compose up -d
        sleep 30
        
        nc -zv localhost 8001 || echo "Port 8001 is not open"
        nc -zv localhost 7860 || echo "Port 7860 is not open"
        nc -zv localhost 11434 || echo "Port 11434 is not open"

        curl -f http://localhost:8001/health || echo "Health check failed for port 8001"
        curl -f http://localhost:7860/health || echo "Health check failed for port 7860"

        docker-compose logs
        docker-compose down

    - name: Clean up after test
      if: always()
      run: |
        docker system prune -af
        df -h