name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - refactor_app_server
  pull_request:
    branches:
      - main

jobs:
  build-and-push-app:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: latest

    - name: Aggressive disk space cleanup
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt-get clean
        sudo apt-get autoclean
        sudo apt-get autoremove -y
        docker stop $(docker ps -aq) || true
        docker rm -f $(docker ps -aq) || true
        docker rmi -f $(docker images -q) || true
        docker system prune -af --volumes
        docker network prune -f
        sudo rm -rf /var/lib/docker/overlay2
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
        sudo rm -rf /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup
        sudo rm -rf /home/linuxbrew
        sudo rm -rf /usr/local/lib/node_modules
        sudo rm -rf /var/log/journal
        sudo rm -rf /var/tmp/*
        df -h

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Pull and tag BuildKit image
      run: |
        for i in {1..3}; do docker pull moby/buildkit:latest && break || sleep 10; done
        docker tag moby/buildkit:latest moby/buildkit:buildx-stable-1

    - name: Build and push app image
      uses: docker/build-push-action@v5
      id: docker_build_app
      with:
        context: ./project
        file: ./project/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/app:latest
          ghcr.io/${{ github.repository_owner }}/app:latest
        cache-from: |
          type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app:buildcache
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/app:buildcache
        cache-to: |
          type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app:buildcache,mode=max
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/app:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        outputs: type=docker,dest=/tmp/app-image.tar

    - name: Load app image
      run: |
        docker load --input /tmp/app-image.tar
        docker image ls -a

    - name: Clean up after build
      if: always()
      run: |
        docker system prune -af
        docker volume prune -f
        docker network prune -f
        df -h

  build-and-push-gradio:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: latest

    - name: Aggressive disk space cleanup
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt-get clean
        sudo apt-get autoclean
        sudo apt-get autoremove -y
        docker stop $(docker ps -aq) || true
        docker rm -f $(docker ps -aq) || true
        docker rmi -f $(docker images -q) || true
        docker system prune -af --volumes
        docker network prune -f
        sudo rm -rf /var/lib/docker/overlay2
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
        sudo rm -rf /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup
        sudo rm -rf /home/linuxbrew
        sudo rm -rf /usr/local/lib/node_modules
        sudo rm -rf /var/log/journal
        sudo rm -rf /var/tmp/*
        df -h

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Build and push gradio image
      uses: docker/build-push-action@v5
      id: docker_build_gradio
      with:
        context: ./project
        file: ./project/Dockerfile.gradio
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/gradio:latest
          ghcr.io/${{ github.repository_owner }}/gradio:latest
        cache-from: |
          type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/gradio:buildcache
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/gradio:buildcache
        cache-to: |
          type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/gradio:buildcache,mode=max
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/gradio:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        outputs: type=docker,dest=/tmp/gradio-image.tar

    - name: Load gradio image
      run: |
        docker load --input /tmp/gradio-image.tar
        docker image ls -a

    - name: Clean up after build
      if: always()
      run: |
        docker system prune -af
        docker volume prune -f
        docker network prune -f
        df -h

  test-deployment:
    needs: [build-and-push-app, build-and-push-gradio]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment variables
      run: |
        echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}" >> $GITHUB_ENV
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Create .env file
      run: |
        echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}" > ./project/.env
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> ./project/.env

    - name: Pull and run Docker containers
      run: |
        cd ./project
        docker-compose pull
        docker-compose up -d
        sleep 30  # Give containers time to start up

    - name: Check container status
      run: |
        docker-compose ps

    - name: Check port availability
      run: |
        echo "Checking port 8001 (App): http://localhost:8001"
        nc -zv localhost 8001 && echo "Port 8001 is open" || echo "Port 8001 is not open"
        
        echo "Checking port 7860 (Gradio): http://localhost:7860"
        nc -zv localhost 7860 && echo "Port 7860 is open" || echo "Port 7860 is not open"
        
        echo "Checking port 11434 (Ollama): http://localhost:11434"
        nc -zv localhost 11434 && echo "Port 11434 is open" || echo "Port 11434 is not open"

    - name: Perform health checks
      run: |
        echo "Health check for App (port 8001): http://localhost:8001/health"
        curl -f http://localhost:8001/health && echo "Health check passed for port 8001" || echo "Health check failed for port 8001"
        
        echo "Health check for Gradio (port 7860): http://localhost:7860/health"
        curl -f http://localhost:7860/health && echo "Health check passed for port 7860" || echo "Health check failed for port 7860"

    - name: Display container logs
      if: always()
      run: |
        cd ./project
        docker-compose logs

    - name: Stop and remove containers
      if: always()
      run: |
        cd ./project
        docker-compose down

    - name: Clean up
      if: always()
      run: |
        docker system prune -af
        docker volume prune -f
        docker network prune -f