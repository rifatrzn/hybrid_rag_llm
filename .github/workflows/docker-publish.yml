name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image to Docker Hub
      uses: docker/build-push-action@v3
      with:
        context: ./project
        file: ./project/Dockerfile
        push: true
        tags: rezwr01/project-server:latest
        build-args: |
          PYTHON_VERSION=3.11.4
        cache-from: type=registry,ref=rezwr01/project-server:buildcache
        cache-to: type=registry,ref=rezwr01/project-server:buildcache,mode=max

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}
    
    - name: Build and push Docker image to GHCR
      uses: docker/build-push-action@v4
      with:
        context: ./project
        file: ./project/Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/rag-server:latest
        build-args: |
          PYTHON_VERSION=3.11.4
        cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/rag-server:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/rag-server:buildcache,mode=max

    - name: Set up environment variables
      run: |
        echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}" >> $GITHUB_ENV
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV

    - name: Run build and test
      id: build-and-test
      timeout-minutes: 30  # Set a 30-minute timeout for this step
      run: |
        start_time=$(date +%s)
        
        docker build -t rezwr01/project-server ./project
        docker run --name test-container -d \
          -e NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }} \
          -e GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} \
          rezwr01/project-server:latest
        
        # Wait for container to start (adjust sleep time as needed)
        sleep 30
        
        # Run your test commands here
        docker exec test-container python -c "print('Container is running')"
        
        # Add more test commands as needed
        
        # Stop and remove the container
        docker stop test-container
        docker rm test-container
        
        end_time=$(date +%s)
        echo "duration=$((end_time - start_time))" >> $GITHUB_OUTPUT

    - name: Print execution time
      if: always()
      run: |
        duration=${{ steps.build-and-test.outputs.duration }}
        minutes=$((duration / 60))
        seconds=$((duration % 60))
        echo "Build and test execution time: ${minutes} minutes and ${seconds} seconds"

  test-deployment:
      needs: build-and-push
      runs-on: ubuntu-latest
      steps:
      - name: Pull and run Docker image
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/rag-server:latest
          docker run -d --name test-container -p 8000:8000 -p 7860:7860 \
          -e NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }} \
          -e GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} \
          ghcr.io/${{ github.repository_owner }}/rag-server:latest

      - name: Wait for container to start
        run: sleep 30

      - name: Check if ports are open
        run: |
          nc -zv localhost 8000
          nc -zv localhost 7860

      - name: Check application health
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:7860/health || exit 1

      - name: Print container logs
        if: always()
        run: docker logs test-container

      - name: Stop and remove container
        if: always()
        run: |
          docker stop test-container
          docker rm test-container
