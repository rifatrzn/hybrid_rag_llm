name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - refactor_app_server
  pull_request:
    branches:
      - main

jobs:
  build-and-push-app:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Reinstall Docker
      run: |
        sudo apt-get remove -y docker docker-engine docker.io containerd runc
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo systemctl enable docker
        sudo systemctl start docker

    - name: Configure Docker Storage Driver
      run: |
        echo '{"storage-driver": "vfs"}' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker

    - name: Aggressive disk space cleanup
      run: |
        sudo rm -rf /var/lib/docker/overlay2
        sudo rm -rf /var/lib/docker/containers
        sudo rm -rf /var/lib/docker/tmp
        docker system prune -af --volumes
        sudo service docker restart
        df -h

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: latest

    - name: Pull and tag BuildKit image
      run: |
        for i in {1..3}; do docker pull moby/buildkit:latest && break || sleep 10; done
        docker tag moby/buildkit:latest moby/buildkit:buildx-stable-1

    - name: Build and push app image
      uses: docker/build-push-action@v5
      id: docker_build_app
      with:
        context: ./project
        file: ./project/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/app:latest
          ghcr.io/${{ github.repository_owner }}/app:latest
        cache-from: |
          type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app:buildcache
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/app:buildcache
        cache-to: |
          type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app:buildcache,mode=max
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/app:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        outputs: type=docker,dest=/tmp/app-image.tar

    - name: Load app image
      run: |
        docker load --input /tmp/app-image.tar
        docker image ls -a

    - name: Clean up after build
      if: always()
      run: |
        docker system prune -af
        docker volume prune -f
        docker network prune -f
        df -h

  build-and-push-gradio:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: latest

    - name: Aggressive disk space cleanup
      run: |
        sudo rm -rf /var/lib/docker/overlay2
        sudo rm -rf /var/lib/docker/containers
        sudo rm -rf /var/lib/docker/tmp
        docker system prune -af --volumes
        sudo service docker restart
        df -h

    - name: Pull and tag BuildKit image
      run: |
        for i in {1..3}; do docker pull moby/buildkit:latest && break || sleep 10; done
        docker tag moby/buildkit:latest moby/buildkit:buildx-stable-1

    - name: Build and push gradio image
      uses: docker/build-push-action@v5
      id: docker_build_gradio
      with:
        context: ./project
        file: ./project/Dockerfile.gradio
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/gradio:latest
          ghcr.io/${{ github.repository_owner }}/gradio:latest
        cache-from: |
          type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/gradio:buildcache
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/gradio:buildcache
        cache-to: |
          type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/gradio:buildcache,mode=max
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/gradio:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        outputs: type=docker,dest=/tmp/gradio-image.tar

    - name: Load gradio image
      run: |
        docker load --input /tmp/gradio-image.tar
        docker image ls -a

    - name: Clean up after build
      if: always()
      run: |
        docker system prune -af
        docker volume prune -f
        docker network prune -f
        df -h

  test-deployment:
    needs: [build-and-push-app, build-and-push-gradio]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Aggressive disk space cleanup
      run: |
        sudo rm -rf /var/lib/docker/overlay2
        sudo rm -rf /var/lib/docker/containers
        sudo rm -rf /var/lib/docker/tmp
        docker system prune -af --volumes
        sudo service docker restart
        df -h

    - name: Set up environment variables
      run: |
        echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}" >> $GITHUB_ENV
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV

    - name: Install Docker Compose and Run deployment test
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

        echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}" > ./project/.env
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> ./project/.env

        cd ./project
        docker-compose pull
        docker-compose up -d
        sleep 30
        
        nc -zv localhost 8001 || echo "Port 8001 is not open"
        nc -zv localhost 7860 || echo "Port 7860 is not open"
        nc -zv localhost 11434 || echo "Port 11434 is not open"

        curl -f http://localhost:8001/health || echo "Health check failed for port 8001"
        curl -f http://localhost:7860/health || echo "Health check failed for port 7860"

        docker-compose logs
        docker-compose down

    - name: Clean up after test
      if: always()
      run: |
        docker system prune -af
        docker volume prune -f
        docker network prune -f
        df -h

    - name: Check disk space
      run: |
        df -h
        du -sh /*
